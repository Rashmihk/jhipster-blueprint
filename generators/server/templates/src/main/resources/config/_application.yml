<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: http://www.jhipster.tech/profiles/
# More information on configuration properties: http://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
    # Overridden in application-dev.yml
    path: /tomcat/logs/
    level:
        ROOT: INFO
        <%=packageName%>: INFO
        io.github.jhipster: INFO
        org.apache.tomcat: INFO

<%_ if (serviceDiscoveryType === 'eureka') { _%>
eureka:
    client:
        enabled: true
        healthcheck:
            enabled: true
        fetch-registry: true
        register-with-eureka: true
        instance-info-replication-interval-seconds: 10
        registry-fetch-interval-seconds: 10
        service-url:
            defaultZone: http://admin:${jhipster.registry.password}@localhost:8761/eureka/
    instance:
        appname: <%= baseName %>
        instanceId: <%= baseName %>:${spring.application.instance-id:${random.value}}
        lease-renewal-interval-in-seconds: 5
        lease-expiration-duration-in-seconds: 10
        status-page-url-path: ${management.context-path}/info
        health-check-url-path: ${management.context-path}/health
        prefer-ip-address: true
        metadata-map:
            zone: primary # This is needed for the load balancer
            profile: ${spring.profiles.active}
            version: ${info.project.version}
        # prefer-ip-address: true    
ribbon:
    eureka:
        enabled: true
<%_ } _%>
<%_ if (applicationType === 'gateway') { _%>
# See http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html
zuul: # those values must be configured depending on the application specific needs
    host:
        max-total-connections: 1000
        max-per-route-connections: 100
    semaphore:
        max-semaphores: 500l
    <%_ if (serviceDiscoveryType === 'consul') { _%>
    ignoredServices: 'consul,<%= baseName %>' # Prevent Consul and the "<%= baseName %>" app itself from having a Zuul route automatically created for them
    <%_ } _%>

# See https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix:
    command:
        default:
            execution:
                isolation:
                    thread:
                        timeoutInMilliseconds: 10000

<%_ } _%>
<%_ if (applicationType === 'microservice') { _%>
# See https://github.com/Netflix/Hystrix/wiki/Configuration
#hystrix:
#    command:
#        default:
#            execution:
#                isolation:
#                    thread:
#                        timeoutInMilliseconds: 10000
# See https://github.com/spring-cloud/spring-cloud-netflix/issues/1330
feign:
    hystrix:
        enabled: true

hystrix:
    share-security-context: true

<%_ } _%>
management:
    security:
        # We will be relying on the sys_sec_func table to provide security on Actuator endpoints
        enabled: false
        roles: ADMIN
    context-path: /management
    info:
        git:
            mode: full
    health:
        mail:
            enabled: false # When using the MailService, configure an SMTP server and set this to true
<%_ if (messageBroker === 'kafka') { _%>
        binders:
            enabled: true
<%_ } _%>
spring:
    <%_ if (databaseType === 'couchbase') { _%>
    couchbase:
        bootstrap-hosts: localhost
        bucket:
            name: <%= baseName %>
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'cassandra' || searchEngine === 'elasticsearch') { _%>
    data:
    <%_ } _%>
    <%_ if (databaseType === 'mongodb') { _%>
        mongodb:
            uri: mongodb://localhost:27017
            database: <%= baseName %>
    <%_ } _%>
    <%_ if (databaseType === 'cassandra') { _%>
        cassandra:
            contactPoints: localhost
            protocolVersion: V4
            compression: LZ4
            keyspaceName: <%= baseName %>
    <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
        elasticsearch:
            cluster-name:
            cluster-nodes: localhost:9300
    <%_ } _%>
    datasource:
        type: com.zaxxer.hikari.HikariDataSource
        hikari:
            data-source-properties:
                cachePrepStmts: true
                prepStmtCacheSize: 250
                prepStmtCacheSqlLimit: 2048
                useServerPrepStmts: true
    devtools:
        restart:
            enabled: false
        livereload:
            enabled: false            
    application:
        name: <%= baseName %>
    <%_ if (messageBroker === 'kafka' || serviceDiscoveryType === 'consul') { _%>
    cloud:
        <%_ if (serviceDiscoveryType === 'consul') { _%>
        consul:
            discovery:
                healthCheckPath: /management/health
                instanceId: ${spring.application.name}:${spring.application.instance-id:${random.value}}
                prefer-ip-address: true
            host: localhost
            port: 8500    
    <%_ } _%>
    <%_ if (messageBroker === 'kafka') { _%>
        stream:
            kafka:
                binder:
                    brokers: localhost
                    zk-nodes: localhost
            bindings:
                output:
                    destination: topic-jhipster
        <%_ } _%>
    <%_ } _%>
    <%_ if (!serviceDiscoveryType) { _%>
    profiles:
        # The commented value for `active` can be replaced with valid Spring profiles to load.
        # Otherwise, it will be filled in by <%= buildTool %> when building the WAR file
        # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
        active: #spring.profiles.active#
    <%_ } _%>
    jackson:
        serialization.write_dates_as_timestamps: false
    <%_ if (databaseType === 'sql') { _%>    
    jpa:
        open-in-view: false
        hibernate:
            ddl-auto: none
            naming:
                physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
                implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
        <%_ if (devDatabaseType === 'mysql' || devDatabaseType === 'mariadb') { _%>
        database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
        <%_ } else if (devDatabaseType === 'postgresql') { _%>
        database-platform: io.github.jhipster.domain.util.FixedPostgreSQL82Dialect
        <%_ } else if (devDatabaseType === 'oracle') { _%>
        database-platform: org.hibernate.dialect.Oracle12cDialect
        <%_ } else if (devDatabaseType === 'mssql') { _%>
        database-platform: org.hibernate.dialect.SQLServer2012Dialect
        <%_ } else { _%>
        database-platform: io.github.jhipster.domain.util.FixedH2Dialect
        <%_ } _%>
        <%_ if (devDatabaseType === 'mysql' || devDatabaseType === 'mariadb') { _%>
        database: MYSQL
        <%_ } else if (devDatabaseType === 'postgresql') { _%>
        database: POSTGRESQL
        <%_ } else if (devDatabaseType === 'oracle') { _%>
        database: ORACLE
        <%_ } else if (devDatabaseType === 'mssql') { _%>
        database: SQL_SERVER
        <%_ } else { _%>
        database: H2
        <%_ } _%>
        
        show-sql: true
        properties:
            hibernate.id.new_generator_mappings: true
            hibernate.cache.use_second_level_cache: <% if (enableHibernateCache) { %>true<% } else { %>false<% } %>
            hibernate.cache.use_query_cache: false
            hibernate.generate_statistics: true
            <%_ if (enableHibernateCache) { _%>
                <%_ if (cacheProvider === 'ehcache') { _%>
            hibernate.cache.region.factory_class: io.github.jhipster.config.jcache.NoDefaultJCacheRegionFactory
                <%_ } else if (cacheProvider === 'hazelcast') { _%>
            hibernate.cache.region.factory_class: com.hazelcast.hibernate.HazelcastCacheRegionFactory
            hibernate.cache.hazelcast.instance_name: <%= baseName %>
                <%_ } else if (cacheProvider === 'infinispan') { _%>
            hibernate.cache.region.factory_class: <%=packageName%>.config.CacheFactoryConfiguration
            hibernate.cache.inifinispan.statistics: true
            hibernate.cache.use_minimal_puts: true
            hibernate.cache.infinispan.entity.expiration.lifespan: 3600000
            hibernate.cache.infinispan.entity.eviction.max_entries: 1000
            hibernate.cache.infinispan.jgroups_cfg: default-configs/default-jgroups-tcp.xml
                <%_ } _%>
                <%_ if (cacheProvider === 'hazelcast') { _%>
            hibernate.cache.use_minimal_puts: true
            hibernate.cache.hazelcast.use_lite_member: true
                <%_ } _%>
            <%_ } _%>
    <%_ } _%>
    mail:
        host: localhost
        port: 25
        username:
        password: 
    messages:
        basename: i18n/messages
    mvc:
        favicon:
            enabled: false
    thymeleaf:
        cache: true
        mode: XHTML

<%_ if (authenticationType === 'oauth2') { _%>

# ===================================================================
# OpenID Connect Settings. Default settings are for Keycloak in Docker.
# Start Keycloak using `docker-compose -f src/main/docker/keycloak.yml up`.
#
# To use Okta, your settings should resemble the following:
#
# accessTokenUri: https://{yourOktaDomain}.com/oauth2/default/v1/token
# userAuthorizationUri: https://{yourOktaDomain}.com/oauth2/default/v1/authorize
# clientId: {copy after creating an OIDC app}
# clientSecret: {copy after creating an OIDC app}
# userInfoUri: https://{yourOktaDomain}.com/oauth2/default/v1/userinfo
# tokenInfoUri: https://{yourOktaDomain}.com/oauth2/default/v1/introspect
#
# You can also override these properties using environment variables.
# For example:
#
# export SECURITY_OAUTH2_CLIENT_CLIENT_ID="jhipster"
# export SECURITY_OAUTH2_CLIENT_CLIENT_SECRET="38561a05"
# ===================================================================
<%_ } _%>
security:
    basic:
        enabled: false
    <%_ if (authenticationType === 'uaa') { _%>
    oauth2:
        resource:
            filter-order: 3
    <%_ } _%>
    <%_ if (authenticationType === 'oauth2') {  _%>
    oauth2:
        client:
            access-token-uri: http://localhost:9080/auth/realms/jhipster/protocol/openid-connect/token
            user-authorization-uri: http://localhost:9080/auth/realms/jhipster/protocol/openid-connect/auth
            <%_ if (applicationType === 'gateway' || applicationType === 'monolith') { _%>
            client-id: web_app
            client-secret: web_app
            client-authentication-scheme: form
            scope: openid profile email
            <%_ } _%>
            <%_ if (applicationType === 'microservice') { _%>
            client-id: internal
            client-secret: internal
            authentication-scheme: header
            client-authentication-scheme: header
            <%_ } _%>
        resource:
            filter-order: 3
            user-info-uri: http://localhost:9080/auth/realms/jhipster/protocol/openid-connect/userinfo
            token-info-uri: http://localhost:9080/auth/realms/jhipster/protocol/openid-connect/token/introspect
            prefer-token-info: false
            <%_ if (applicationType === 'gateway' || applicationType === 'microservice') {  _%>
            jwt:
                key-uri: http://localhost:9080/auth/realms/jhipster
            <%_ } _%>
    <%_ } _%>

server:
    port: <%= serverPort %>
    session:
        cookie:
            http-only: true
    #Increase http head size and post size
    max-http-post-size: 1000000
    max-http-header-size: 1000000

    compression:
        enabled: true
        mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
        min-response-size: 1024

    #tomcat access log
    tomcat:
        accesslog:
            enabled: true # Enable access log.
            # Overridden in application-dev.yml
            file-date-format: yyyyMMdd
            pattern: common
            prefix: <%=baseName%>_access
            rename-on-rotate: true

info:
    project:
        version: #project.version#

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: http://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
    <%_ if (authenticationType === 'jwt') { _%>
    security:
        authentication:
            jwt:
                secret: <%= jwtSecretKey %>
                # Token is valid 24 hours
                token-validity-in-seconds: 86400
                token-validity-in-seconds-for-remember-me: 2592000
    <%_ } _%>
    <%_ if ((applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa') && authenticationType === 'uaa') { _%>
    security:
        client-authorization:
            <%_ if (applicationType !== 'uaa') { _%>
            access-token-uri: http://<%= uaaBaseName.toLowerCase() %>/oauth/token
            token-service-id: <%= uaaBaseName.toLowerCase() %>
            <%_ } _%>
            client-id: internal
            client-secret: internal
    <%_ } _%>
    <%_ if (applicationType == 'uaa') { _%>
        authentication:
            jwt:
                # Access Token is valid for 5 mins
                token-validity-in-seconds: 300
                # Refresh Token is valid for 7 days
                token-validity-in-seconds-for-remember-me: 252000
    <%_ } _%>
<%_ if (authenticationType === 'session') { _%>
    security:
        remember-me:
            # security key (this key should be unique for your application, and kept secret)
            key: <%= rememberMeKey %>
<%_ } _%>
    <%_ if (cacheProvider !== 'no') { _%>
    cache: # Cache configuration
        <%_ if (cacheProvider === 'hazelcast') { _%>
        hazelcast: # Hazelcast distributed cache
            time-to-live-seconds: 3600
            backup-count: 1
            management-center: # Full reference is available at: http://docs.hazelcast.org/docs/management-center/3.9/manual/html/Deploying_and_Starting.html
                enabled: false
                update-interval: 3
                url:
        <%_ } _%>
        <%_ if (cacheProvider === 'ehcache') { _%>
        ehcache: # Ehcache configuration
            time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache
            max-entries: 1000 # Number of objects in each cache entry
        <%_ } _%>
        <%_ if (cacheProvider === 'infinispan') { _%>
        infinispan:
            config-file: default-configs/default-jgroups-tcp.xml
            statsEnabled: true
            # local app cache
            local:
                time-to-live-seconds: 60 # By default objects stay 1 hour (in minutes) in the cache
                max-entries: 1000 # Number of objects in each cache entry
            # distributed app cache
            distributed:
                time-to-live-seconds: 60 # By default objects stay 1 hour (in minutes) in the cache
                max-entries: 1000 # Number of objects in each cache entry
                instance-count: 2
            # replicated app cache
            replicated:
                time-to-live-seconds: 60 # By default objects stay 1 hour (in minutes) in the cache
                max-entries: 1000 # Number of objects in each cache entry
        <%_ } _%>
    <%_ } _%>
    <%_ if (applicationType === 'gateway') { _%>
    gateway:
        rate-limiting:
            enabled: false
        authorized-microservices-endpoints: # Access Control Policy, if left empty for a route, all endpoints will be accessible
            app1: /api # recommended prod configuration
    <%_ } _%>
    http:
        version: V_1_1 # To use HTTP/2 you will need SSL support (see above the "server.ssl" configuration)
        cache: # Used by the CachingHttpHeadersFilter
            timeToLiveInDays: 1461
    async:
        core-pool-size: 2
        max-pool-size: 50
        queue-capacity: 10000
    # By default CORS is disabled. Uncomment to enable.
    cors:
        allowed-origins: "*"
        allowed-methods: "*"
        allowed-headers: "*"
        <%_ if (authenticationType === 'session') { _%>
        exposed-headers: "Link,X-Total-Count"
        <%_ } else { _%>
        exposed-headers: "Authorization,Link,X-Total-Count"
        <%_ } _%>
        allow-credentials: true
        max-age: 1800
    mail:
        from: <%= baseName %>@localhost
        base-url: http://my-server-url-to-change # Modify according to your server's URL
    metrics: # DropWizard Metrics configuration, used by MetricsConfiguration
        jmx.enabled: true
        graphite:
            enabled: false
            host: localhost
            port: 2003
            prefix: <%= baseName %>
        prometheus:
            enabled: false
            endpoint: /prometheusMetrics
        logs: # Reports Dropwizard metrics in the logs
            enabled: false
            report-frequency: 60 # in seconds    
    logging:
        logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
            enabled: false
            host: localhost
            port: 5000
            queue-size: 512
    <%_ if (applicationType === 'microservice' || applicationType === 'gateway') { _%>
        spectator-metrics: # Reports Spectator Circuit Breaker metrics in the logs
            enabled: false
            # edit spring.metrics.export.delay-millis to set report frequency
    <%_ } _%>        
    swagger:
        default-include-pattern: /api/.*
        title: <%=baseName%> API
        description: <%=baseName%> API documentation
        version: 0.0.1
        terms-of-service-url:
        contact-name:
        contact-url:
        contact-email:
        license:
        license-url:
    ribbon:
        display-on-active-profiles: dev

<%_ if (applicationType === 'uaa') { _%>
uaa:
    #be sure to to change to a different keystore in production!
    #create one using: keytool -genkeypair -keyalg RSA -keystore keystore_prod.jks -storepass <secretpasswd> -alias <myalias>
    key-store:
        name: keystore.jks
        password: password
        alias: selfsigned
    web-client-configuration:
        # Access Token is valid for 5 mins
        access-token-validity-in-seconds: 300
        # Refresh Token is valid for 7 days
        refresh-token-validity-in-seconds-for-remember-me: 604800
        #change client secret in production, keep in sync with gateway configuration
        client-id: web_app
        secret: changeit
<%_ } else if ((applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa') && authenticationType === 'uaa') { _%>
oauth2:
    signature-verification:
        public-key-endpoint-uri: http://<%= uaaBaseName.toLowerCase() %>/oauth/token_key
        #ttl for public keys to verify JWT tokens (in ms)
        ttl: 3600000
        #max. rate at which public keys will be fetched (in ms)
        public-key-refresh-rate-limit: 10000
    web-client-configuration:
        #change client secret in production, keep in sync with UAA configuration
        client-id: web_app
        secret: changeit
    <%_ if (applicationType === 'gateway') { _%>
        # Controls session expiration due to inactivity (ignored for remember-me).
        # Negative values disable session inactivity expiration.
        session-timeout-in-seconds: 1800
    <%_ } _%>
<%_ } _%>

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# http://www.jhipster.tech/common-application-properties/
# ===================================================================

application:

# default path added for file download
# require to work with fhlbny-commons

directory: D:\\downloads

# jasypt configuration
jasypt:
    encryptor:
        algorithm: PBEWITHSHA256AND256BITAES-CBC-BC
        keyObtentionIterations: 100000
        providerClassName: org.bouncycastle.jce.provider.BouncyCastleProvider
        saltGeneratorClassname: org.jasypt.salt.RandomSaltGenerator

# liquibase enable disable from property
liquibase:
    enabled: false

kerberos.conf-location: /etc/krb5.conf
#tomcat access log path
server.tomcat.accesslog.directory: /tomcat/logs/
version: #project.version#

# set max size limit for page
phoenix:
     report:
        maxRecords: 2500
