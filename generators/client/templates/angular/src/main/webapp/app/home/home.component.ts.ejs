<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { Component, OnInit } from '@angular/core';
import { Location } from '@angular/common';

import { ITEMS_PER_PAGE } from '../shared';
import { AuthenticationService } from '@fhlbny-ui-commons/core';
import { FilterField, TableField, PageData, ExportType, SortConfig } from '@fhlbny-ui-commons/components';
import { Router, ActivatedRoute } from '@angular/router';

/**
 * commented due to authentication from ui-commons
 *
 *<%_ if (authenticationType !== 'oauth2') { _%>
 *import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
 *<%_ } _%>
 *import { JhiEventManager } from 'ng-jhipster';
 *
 *import { Account, <% if (authenticationType !== 'oauth2') { %>LoginModalService<% } else { %>LoginService<% } %>, Principal } from '../shared';
 *
 */

@Component({
    selector: '<%= jhiPrefixDashed %>-home',
    templateUrl: './home.component.html',
    styleUrls: [
        'home.scss'
    ]

})
export class HomeComponent implements OnInit {
    userDetails: any;
    fields: any[] = [{
        name: 'id',
        label: 'ID',
        inputType: 'number',
        routerLinkFn: (item) => `../entry/${item.id}`
    }, {
        name: 'title',
        label: 'Title'
    }, {
        name: 'content',
        label: 'Content'
    }, {
        name: 'blog.name',
        label: 'Blog'
    }];

    filterFields: FilterField[] = this.fields;
    tableFields: TableField[] = this.fields;
    items: any[] = [
        { title: 'A blog', content: 'A blogs content', name: 'A blogs name' }
    ];

    sortConfig: SortConfig = {
        ascending: true,
        callback: this.reset.bind(this),
        predicate: 'id'
    };

    pageData: PageData = {
        currentPage: 0,
        totalPages: 2,
        totalItems: 25,
        itemsPerPage: ITEMS_PER_PAGE,
        numItemsOnCurrentPage: 10
    };
    searchObject: object;

    constructor(
        private authService: AuthenticationService,
        private _route: ActivatedRoute,
        private _router: Router,
        private location: Location
    ) {
    }

    ngOnInit() {
        this.authService.userDetails.subscribe(
            (userdetails) => {
                this.userDetails = userdetails;
            }
        );
        // Subscribe to query params to get the details of
        this._route.queryParams.subscribe((params) => {
            // Check whether there are any parameters in the query params or not
            if (Object.keys(params).length !== 0) {
                // If yes, get the static parameters.
                this.pageData.itemsPerPage = +params['itemsPerPage'];
                this.pageData.currentPage = +params['page'];
                this.sortConfig.ascending = params['ascending'];
                this.sortConfig.predicate = params['predicate'];

                // Also, extract search params from the query params so that they can be set as values for respective fields
                this.fields.forEach(
                    (value1, index1) => {
                        Object.keys(params).forEach(
                            (value, index2) => {
                                if (value.substr(0, value.lastIndexOf('.')) === value1.name) {
                                    console.log(params[value]);
                                    this.filterFields[index1]['value'] = params[value];
                                }
                            });
                    });
                console.log(this.filterFields);
            }
        });
    }
    onSearchSubmit(searchObject: object) {
        this.searchObject = searchObject;
        this.changeStateParams();
    }

    onPageSizeChange(itemsPerPage: number) {
        this.pageData.itemsPerPage = itemsPerPage;
        this.changeStateParams();
    }

    exportClicked(event: ExportType) {
        console.log(event);
    }

    loadPage(page) {
        this.pageData.currentPage = page + 1;
        this.changeStateParams();
    }

    reset() {
        this.pageData.currentPage = 0;
        this.items = [];
        this.changeStateParams();
    }

    /**
     * Creates object that will be served as input to createQueryParamsForCurrentUrl
     */
    changeStateParams() {
        const stateParams: StateParam = {
            ascending: this.sortConfig.ascending,
            predicate: this.sortConfig.predicate,
            itemsPerPage: this.pageData.itemsPerPage,
            page: this.pageData.currentPage
        };

        if (this.searchObject !== undefined) {
            Object.keys(this.searchObject).forEach(
                (key, index, array) => {
                    stateParams[key] = this.searchObject[key];
                }
            );
        }
        this.createQueryParamsForCurrentUrl(stateParams);
    }

    /**
     * Converts object to query parmas and sets it in the current url.
     * @param object The object that needs to loaded in the adress bar as query param
     */
    createQueryParamsForCurrentUrl(object: StateParam) {
        let urlWithParams = this.location.normalize(this._router.url);
        Object.keys(object).forEach(function(key, index, array) {
            if (urlWithParams.indexOf('?') === -1) {
                urlWithParams += `?`;
            } else {
                urlWithParams += `&`;
            }
            urlWithParams += `${key}=${object[key]}`;
        });
        this.location.replaceState(urlWithParams);
    }
    <%#
    commented due to authentication from ui-commons
    -%>
    /*
    account: Account;
    <%_ if (authenticationType !== 'oauth2') { _%>
    modalRef: NgbModalRef;
    <%_ } _%>

    constructor(
        private principal: Principal,
        <%_ if (authenticationType !== 'oauth2') { _%>
        private loginModalService: LoginModalService,
        <%_ } else { _%>
        private loginService: LoginService,
        <%_ } _%>
        private eventManager: JhiEventManager
    ) {
    }

    ngOnInit() {
        this.principal.identity().then((account) => {
            this.account = account;
        });
        this.registerAuthenticationSuccess();
    }

    registerAuthenticationSuccess() {
        this.eventManager.subscribe('authenticationSuccess', (message) => {
            this.principal.identity().then((account) => {
                this.account = account;
            });
        });
    }

    isAuthenticated() {
        return this.principal.isAuthenticated();
    }

    login() {
        <%_ if (authenticationType !== 'oauth2') { _%>
        this.modalRef = this.loginModalService.open();
        <%_ } else { _%>
        this.loginService.login();
        <%_ }_%>
    }
     */
}

// A contract to set query params
export class StateParam {
    ascending: boolean;
    predicate: string;
    itemsPerPage: number;
    page: number;
    [x: string]: any;
}
