<%#
Copyright 2013-2018 the original author or authors from the JHipster project.

This file is part of the JHipster project, see http://www.jhipster.tech/
for more information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-%>
<%_
const keyPrefix = angularAppName + '.'+ entityTranslationKey + '.';
_%>
<%#For our UI requirement created new card with card-header-%>
<fhlbny-breadcrumb [breadcrumbData]="breadcrumb"></fhlbny-breadcrumb>
<form [formGroup]="<%= entityInstance %>Form">
  <fhlbny-panel headerTitle="{{panelTitle}}">
    <div class="form-group row d-none">
      <label for="id" class="col-12 col-sm-3 col-form-label text-sm-right">
        Id
      </label>
      <div class="col-12 col-lg-6 col-sm-8">
        <input type="number" formControlName="id" class="form-control form-control-sm" id="field_id" placeholder="Enter id">
      </div>
    </div>
    <%_ for (idx in fields) {
      const fieldName = fields[idx].fieldName;
      const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
      const fieldNameHumanized = fields[idx].fieldNameHumanized;
      const fieldType = fields[idx].fieldType;
      const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
      let fieldInputType = 'text';
      let ngModelOption = '';
      const translationKey = keyPrefix + fieldName;
      if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
          fieldInputType = 'number';
      } else if (fieldType === 'LocalDate') {
          fieldInputType = 'date';
      } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
          fieldInputType = 'datetime-local';
      } else if (fieldType === 'Boolean') {
          fieldInputType = 'checkbox';
      } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
          fieldInputType = 'hidden';
      }
  _%>
    <div class="form-group row" #<%= fieldName %>Container>
      <label class="col-12 col-sm-3 col-form-label text-sm-right" jhiTranslate="<%= translationKey %>" for="field_<%= fieldName %>"<% if (fields[idx].javadoc) { if (enableTranslation) { %> [ngbTooltip]="'<%= keyPrefix %>help.<%= fieldName %>' | translate"<% } else { %> ngbTooltip="<%= fields[idx].javadoc %>"<% } } %>><%= fieldNameHumanized %></label>
      <div class="col-12 col-lg-6 col-sm-8">
          <%_ if (fields[idx].fieldIsEnum) { _%>
            <select class="form-control" name="<%= fieldName %>" formControlName="<%= fieldName %>" id="sel_<%= fieldName %>" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %> required<% } %>>
            <%_ const enumPrefix = angularAppName + '.'+ fieldType;
                const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
                for (key in values) {
                    const value = values[key]; _%>
                <option value="<%= value %>"><% if (enableTranslation) { %>{{'<%=enumPrefix%>.<%=value%>' | translate}}<% } else { %><%=value%><% } %></option>
                <%_ } _%>
            </select>
            <%_ } else { _%>
            <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
            <div>
                <%_ if (fieldTypeBlobContent === 'image') { _%>
                <img [src]="'data:' + <%=entityInstance %>.<%=fieldName%>ContentType + ';base64,' + <%=entityInstance %>.<%=fieldName%>" style="max-height: 100px;" *ngIf="<%= entityInstance %> && <%= entityInstance %>.<%= fieldName %>" alt="<%=entityInstance %> image"/>
                <%_ } _%>
                <div *ngIf="<%= entityInstance %> && <%= entityInstance %>.<%= fieldName %>" class="form-text text-danger clearfix">
                    <%_ if (fieldTypeBlobContent === 'any') { _%>
                    <a class="pull-left text-dark" (click)="openFile(<%= entityInstance %>.<%= fieldName %>ContentType, <%= entityInstance %>.<%= fieldName %>)" jhiTranslate="entity.action.open">open</a><br>
                    <span class="pull-left text-dark">{{<%= entityInstance %>.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>.<%= fieldName %>)}}</span>
                    <%_ } else { _%>
                    <span class="pull-left text-dark">{{<%= entityInstance %>.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>.<%= fieldName %>)}}</span>
                    <%_ } _%>
                    <%_ if (fieldTypeBlobContent === 'image') { _%>
                    <button type="button" (click)="clearInputImage('<%= fieldName %>', '<%= fieldName %>ContentType', 'fileImage')" class="btn btn-secondary btn-xs pull-right">
                    <%_ } else { _%>
                    <button type="button" (click)="<%= entityInstance %>.<%= fieldName %>=null;<%= entityInstance %>.<%= fieldName %>ContentType=null;"
                            class="btn btn-secondary btn-xs pull-right">
                    <%_ } _%>
                        <span class="fa fa-times"></span>
                    </button>
                </div>
                <input type="file" id="file_<%= fieldName %>" (change)="setFileData($event, <%= entityInstance %>, '<%= fieldName %>', <% if (fieldTypeBlobContent === 'image') { %>true)" accept="image/*" jhiTranslate="entity.action.addimage"<% } else { %>false)" jhiTranslate="entity.action.addblob"<% } %>/>
            </div>
            <%_ } _%>
            <%_ if (fieldType === 'LocalDate') { _%>
            <div class="input-group">
                <input id="field_<%= fieldName %>" type="text" class="form-control <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %>required <% } %>" formControlName="<%= fieldName %>" ngbDatepicker  #<%= fieldName %>Dp="ngbDatepicker"
                <%- include ng_validators %>/>
                <span class="input-group-append">
                    <button type="button" class="btn btn-secondary" (click)="<%= fieldName %>Dp.toggle()"><i class="fa fa-calendar"></i></button>
                </span>
            </div>
            <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <div class="d-flex">
                <input id="field_<%= fieldName %>" type="text" class="form-control <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %>required <% } %>" formControlName="<%= fieldName %>" ngbDatepicker  #<%= fieldName %>Dp="ngbDatepicker"                
                <%- include ng_validators %>/>
                <span class="input-group-append">
                  <button type="button" class="btn btn-secondary" (click)="<%= fieldName %>Dp.toggle()"><i class="fa fa-calendar"></i></button>
              </span>
            </div>
            <%_ } else if(fieldTypeBlobContent === 'text') { _%>
            <textarea *ngIf="<%= entityInstance %>" class="form-control <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %>required <% } %>" name="<%= fieldName %>" id="field_<%= fieldName %>"
              formControlName="<%= fieldName %>"  [(ngModel)]="<%= entityInstance %>.<%= fieldName %>" <%- include ng_validators %>></textarea>
            <%_ } else if(fieldType === 'Boolean') { _%>
              <input *ngIf="<%= entityInstance %>"  type="<%= fieldInputType %>" class="form-control form-control-sm checkbox" formControlName="<%= fieldName %>"  [(ngModel)]="<%= entityInstance %>.<%= fieldName %>" id="field_<%= fieldName %>"
              placeholder="Enter <%= fieldName %>"/>
            <%_ } else { _%>
              <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                <input *ngIf="<%= entityInstance %>"  type="<%= fieldInputType %>" class="form-control form-control-sm <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %>required <% } %>" formControlName="<%= fieldName %>"  [(ngModel)]="<%= entityInstance %>.<%= fieldName %>" id="field_<%= fieldName %>"
                placeholder="Enter <%= fieldName %>"/>
              <%_ } else { _%>  
                <input *ngIf="<%= entityInstance %>"  type="<%= fieldInputType %>" class="form-control form-control-sm <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %>required <% } %>" formControlName="<%= fieldName %>"  id="field_<%= fieldName %>"
                placeholder="Enter <%= fieldName %>"/>
              <%_ } _%>
                <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
            <input *ngIf="<%= entityInstance %>" type="hidden" class="form-control" name="<%= fieldName %>ContentType" id="field_<%= fieldName %>ContentType"
            formControlName="<%= fieldName %>ContentType"  [(ngModel)]="<%= entityInstance %>.<%= fieldName %>ContentType"/>
                <%_ } _%>
            <%_ } _%>
            <%_ } _%>
            <%_ if (fields[idx].fieldValidate === true) { _%>
            <div *ngIf="<%= entityInstance %>Form.controls['<%= fieldName %>'].errors && <%= entityInstance %>Form.controls['<%= fieldName %>'].dirty" class="position-relative invalid-feedback d-flex">
              <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                <div class="position-absolute" *ngIf="<%= entityInstance %>Form.controls['<%= fieldName %>'].errors.required"><%= fieldName %> is required.</div>
              <%_ } _%>
              <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                <div class="position-absolute" *ngIf="<%= entityInstance %>Form.controls['<%= fieldName %>'].errors.minlength">
                  This field cannot be longer than <%= fields[idx].fieldValidateRulesMinlength %> characters.
                </div>
              <%_ } _%>
              <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                <div class="position-absolute" *ngIf="<%= entityInstance %>Form.controls['<%= fieldName %>'].errors.maxlength">
                  This field cannot be longer than <%= fields[idx].fieldValidateRulesMaxlength %> characters.
                </div>
              <%_ } _%>
            </div>
            <%_ } _%>
          </div>
        </div>
      <%_ } _%>
    <div class="form-group text-center row mb-0">
      <div class="col-12 col-sm-3"></div>
      <div class="col-12 col-lg-6 col-sm-8 text-right">
        <ng-container *hasPermission="">
          <button *ngIf="formType === 'update'" type="button" id="btn_update" class="btn btn-primary" (click)="save()">
            <i class="fa fa-save"></i> Update
          </button>
        </ng-container>
        <ng-container *hasPermission="">
          <button *ngIf="formType === 'update'" type="button" id="btn_delete" class="btn btn-primary ml-2" (click)="delete()">
            <i class="fa fa-trash"></i> Delete
          </button>
        </ng-container>
        <button *ngIf="formType === 'add'" type="submit" id="btn_save" class="btn btn-primary" (click)="save()">
          <i class="fa fa-save"></i> Save
        </button>
        <button class="btn btn-dark ml-2" type="button" id="btn_cancel" (click)="previousState()">
          <i class="fa fa-ban"></i> Cancel
        </button>
      </div>
    </div>
  </fhlbny-panel>
</form>
