<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
    if (fields[idx].fieldIsEnum === true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
_%>

    eventSubscriber: Subscription;
    <%_ if (searchEngine === 'elasticsearch') { _%>
    currentSearch: string;
    <%_ } _%>
    <%_ if (databaseType !== 'cassandra') { _%>
    page: any;
    <%_ } _%>

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        private fb: FormBuilder,
        public parseLinks: JhiParseLinks,
        public activatedRoute: ActivatedRoute,
        public el: ElementRef,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: JhiDataUtils,
        <%_ } _%>
        <%_ for (idx in fields) {
            const fieldType = fields[idx].fieldType;
        _%>
        <%_  if (fieldType === 'LocalDate') { _%>
        private jhiDateUtils: JhiDateUtils,
        <%_ break _%>
        <%_  } _%>
        <%_ } _%>
        <%_ for (idx in fields) {
            const fieldType = fields[idx].fieldType;
        _%>
        <%_  if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
        private dateUtils: DateUtils,
            <%_ break _%>
            <%_  } _%>
        <%_ } _%>
        public router: Router,
        private eventManager: JhiEventManager,
        public spinner: SpinnerService
    ) {
        <%_ if (databaseType !== 'cassandra') { _%>
            super([{
                name: 'id'
            },
            <%_ for (idx in fields) {
                const fieldName = fields[idx].fieldName;
                const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
                const fieldType = fields[idx].fieldType;
                var fieldInputType = 'text';
                if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
                    fieldInputType = 'number';
                } else if (fieldType === 'LocalDate') {
                    fieldInputType = 'date';
                }
                _%>
         {
            name: '<%= fieldName %>'
         },
        <%_ } _%>
            ], activatedRoute, parseLinks, router, spinner, <%= entityInstance %>Service, fb, el);
        <%_ if (searchEngine === 'elasticsearch') { _%>
        this.currentSearch = this.activatedRoute.snapshot && this.activatedRoute.snapshot.params['search'] ?
            this.activatedRoute.snapshot.params['search'] : '';
        <%_ } _%>
        <%_ } _%>
        this.breadcrumb = {
            home: 'Home',
            menu: 'Entities',
            entity: '<%= entityUrl %>',
        };
    }

    <%_ if (databaseType !== 'cassandra') { _%>
    compareFn(c1: number, c2: number): boolean {
        return c1 === c2;
    }
    routeToEditPage(id: number) {
        this.router.navigate(['/<%= entityFileName %>/edit/' + id]);
    }
    <%_ } _%>
    <%_ if(searchEngine === 'elasticsearch') { _%>
    search(query) {
        if (!query) {
            return this.clear();
        }
        this.page = 0;
        this.currentSearch = query;
        this.router.navigate(['/<%= entityUrl %>', {
            search: this.currentSearch,
            page: this.page,
            sort: this.predicate + ',' + (this.reverse ? 'asc' : 'desc')
        }]);
        this.loadAll();
    }
    <%_ } _%>
